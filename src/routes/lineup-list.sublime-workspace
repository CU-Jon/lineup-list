{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"topTrack",
				"topTracksFromSpotify\tconst"
			],
			[
				"topT",
				"topTracksFromRedis\tconst"
			],
			[
				"topTa",
				"topTracksFromSpotify\tconst"
			],
			[
				"selec",
				"selectedArtistGenresCount"
			],
			[
				"ari",
				"artists"
			],
			[
				"spot",
				"spotifyTrack\tconst"
			],
			[
				"spoti",
				"spotify_url\tconst"
			],
			[
				"extern",
				"external_urls\tproperty"
			],
			[
				"Spto",
				"SpotifyTrack\tinterface"
			],
			[
				"redis",
				"redisToSpotifyTrack\tfunction"
			],
			[
				"SPot",
				"SpotifyTrack\tinterface"
			],
			[
				"Spo",
				"SpotifyArtist\tinterface"
			],
			[
				"redisArt",
				"redisArtistPromises\tconst"
			],
			[
				"artist",
				"artistIdsString\tconst"
			],
			[
				"rpu",
				"RPUSH\tproperty"
			],
			[
				"Clei",
				"RedisClient\tconst"
			],
			[
				"exclu",
				"excludedArtists"
			],
			[
				"prot",
				"prototype"
			],
			[
				"getElemen",
				"getElementById"
			],
			[
				"getElement",
				"getElementsByClassName"
			],
			[
				"fil",
				"filteredArtists\tconst"
			],
			[
				"getsp",
				"getSpotifyToken\tfunction"
			],
			[
				"Spot",
				"SpotifyPlaylist\tinterface"
			],
			[
				"trackU",
				"trackUriList\tparameter"
			],
			[
				"Spotify",
				"SpotifyTrack\tinterface"
			],
			[
				"Spotif",
				"SpotifyTrack\tinterface"
			],
			[
				"encodeURI",
				"encodeURIComponent\tfunction"
			],
			[
				"Numb",
				"number\tkeyword"
			],
			[
				"getSpot",
				"getSpotifyArtist\tfunction"
			],
			[
				"GetGG",
				"GetGGIssuesSyncArgsSchema"
			],
			[
				"validate",
				"validate_project_access"
			],
			[
				"projet",
				"project_uid"
			],
			[
				"transac",
				"transactionName"
			],
			[
				"get",
				"getVersion"
			],
			[
				"webh",
				"webhooksAuthToken"
			],
			[
				"shows",
				"showsByDate"
			],
			[
				"show",
				"showVenueSearch"
			],
			[
				"emailpromi",
				"emailPromises"
			],
			[
				"selectedVenu",
				"selectedVenueIds"
			],
			[
				"selecte",
				"selectedLocation"
			],
			[
				"new",
				"new-search-button"
			],
			[
				"username",
				"userNameStateChange"
			]
		]
	},
	"buffers":
	[
		{
			"file": "pages.ts",
			"settings":
			{
				"buffer_size": 3803,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "pages.ts"
			}
		},
		{
			"file": "/Users/bteam/Developer/lineup-list/src/redis-helper.ts",
			"settings":
			{
				"buffer_size": 9104,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/bteam/Developer/lineup-list/src/spotify-helper.ts",
			"settings":
			{
				"buffer_size": 8470,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/bteam/Developer/lineup-list/views/customize-list.handlebars",
			"settings":
			{
				"buffer_size": 4518,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "add button to create spotify playlist if user authorizes spotify\nsupport past years for playlist generation\nadd logic to refresh access token in spotify-helper and pass back new token. Or just only hold token cache in spotify-helper\nhash all filters together in customize POST handler, then append that as a query string in the redirect. That way the personalized page has a simple query param and can be deterministic\nhandle enotfound for getting spotify artists/tracks\nfigure out a way to pare down genres\n\n\nadd spotify link to each artist\nadd ability to turn off specific artsts from generated list\nadd homepage for choosing festival\nfix vertical spacing for divs in artist list on customize page\nadd genre to filter\n(done with cookie hack) can you post the customize options to an api endpoint, add the data you need for the next page to the request, then redirect to a GET page route?  that would remove need for all the query params in url on final page\nadd caching of spotify artists / tracks\nside-by-side artists and genres\nfade artists out or show strength of match somehow with number of matching genres checked\nactually pass through # songs per artist\n",
			"settings":
			{
				"buffer_size": 1163,
				"line_ending": "Unix",
				"name": "add button to create spotify playlist if user auth"
			}
		},
		{
			"contents": "import redis from \"redis\";\nimport { readFileSync } from \"fs\";\n\nimport * as spotifyHelper from \"./spotify-helper\";\n\nasync function main() {\n    const redisClient = redis.createClient();\n\n    const festivalName: string = \"Coachella\";\n    const festivalYear: number = 2020;\n    const filename: string = festivalName + \"_\" + festivalYear + \".txt\";\n    const file = readFileSync(filename, \"utf-8\");\n    const artistNames = file.split('\\n');\n\n    const spotifyToken: string = await spotifyHelper.getSpotifyToken();\n    const artists: SpotifyArtist[] = await spotifyHelper.getSpotifyArtists(spotifyToken, artistNames);\n\n/*\nI'm kinda dumb v since we have to get the artists for their IDs anyway, I guess we might as well cache\nthe artist object itself. Makes no difference since its from the same requests.\n\n If you feel like pre-loading all the artists, this will do it (albeit with some solid 429 backoff waiting).\n Otherwise the code in redis-helper will handle getting and caching any artists from the festival list of \n artist ids it doesn't have yet. Current implementation for that is a little nicer since it awaits each one,\n so you hit way less 429s and it ends up taking shorter overall.\n\n    for (const artist of artists) {\n        // Strip out all of the unsupported nested stuff\n        const { external_urls, images, followers, genres, ...restOfArtist } = artist;\n\n        // Store the spotify URL from external_urls cause we need that\n        // For some reason redis refuses to accept this as a param to hmset if it's type is set?\n        const redisArtist: any = {\n            spotify_url: external_urls.spotify,\n            genres: JSON.stringify(genres),\n            ...restOfArtist\n        };\n\n        redisClient.hmset(`artist:${artist.id}`, redisArtist, redis.print);\n    }\n*/\n    // Set our list of artist IDs with a key of the festival name_year\n    const artistIds: string[] = artists.map(x => x.id);\n    redisClient.set(`festival:${festivalName.toLowerCase()}_${festivalYear}`, JSON.stringify(artistIds), redis.print);\n\n    redisClient.quit();\n}\n\nmain()\n",
			"file": "/Users/bteam/Developer/lineup-list/src/warm-cache-for-festival.ts",
			"file_size": 1888,
			"file_write_time": 132262134950226839,
			"settings":
			{
				"buffer_size": 2072,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"type",
				"TypeScript: Signature Info"
			],
			[
				"types",
				"TypeScript: Signature Info"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"markdown",
				"Markdown Preview: Preview in Browser"
			],
			[
				"package",
				"Install Package Control"
			],
			[
				"markdow",
				"Set Syntax: Markdown"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/bteam/Developer/lineup-list",
		"/Users/bteam/Developer/lineup-list/src",
		"/Users/bteam/Developer/lineup-list/src/routes",
		"/Users/bteam/Developer/lineup-list/types",
		"/Users/bteam/Developer/lineup-list/views",
		"/Users/bteam/Developer/lineup-list/views/layouts"
	],
	"file_history":
	[
		"/Users/bteam/Developer/lineup-list/Coachella_2020.txt",
		"/Users/bteam/Developer/lineup-list/src/create-playlist.ts",
		"/Users/bteam/Developer/lineup-list/src/redis-helper.ts",
		"/Users/bteam/Developer/lineup-list/src/server.ts",
		"/Users/bteam/Developer/lineup-list/src/spotify-helper.ts",
		"/Users/bteam/Developer/lineup-list/types/types.d.ts",
		"/Users/bteam/Developer/lineup-list/src/warm-cache-for-festival.ts",
		"/Users/bteam/Developer/lineup-list/Bottlerock_2020.txt",
		"/Users/bteam/Developer/lineup-list/tslint.json",
		"/Users/bteam/Developer/lineup-list/views/customize-list.handlebars",
		"/Users/bteam/Developer/lineup-list/src/routes/api.ts",
		"/Users/bteam/Developer/lineup-list/src/routes/warm-cache-for-festival.ts",
		"/Users/bteam/Developer/lineup-list/views/festivals.handlebars",
		"/Users/bteam/Developer/lineup-list/views/personalized-lineup.handlebars",
		"/Users/bteam/Developer/lineup-list/views/layouts/main.handlebars",
		"/Users/bteam/Developer/lineup-list/package.json",
		"/Users/bteam/Developer/lineup-list/views/list-options.handlebars",
		"/Users/bteam/Developer/lineup-list/tsconfig.json",
		"/Users/bteam/Developer/lineup-list/views/generate-success.handlebars",
		"/Users/bteam/Developer/lineup-list/src/api.ts",
		"/Users/bteam/Developer/lineup-list/src/helpers.ts",
		"/Users/bteam/Developer/lineup-list/src/Coachella_2020.txt",
		"/Users/bteam/Developer/lineup-list/src/constants.ts",
		"/Users/bteam/Developer/lineup-list/coachella_2020.txt",
		"/Users/bteam/Developer/lineup-list/create-playlist.ts",
		"/Users/bteam/Developer/Show-Finder/routes/auth-handler.js",
		"/Users/bteam/Developer/Show-Finder/client/src/App.js",
		"/Users/bteam/Developer/Show-Finder/venue-show-finder.js",
		"/Users/bteam/Developer/Show-Finder/server.js",
		"/Users/bteam/Developer/Show-Finder/scripts/sync-venues.js",
		"/Users/bteam/Developer/tasks-backend/tests/api_tests/test_health.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/data_access/issues.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/validators/issue.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/server/handlers/adskproxy/issues.py",
		"/Users/bteam/Developer/tasks-backend/.flake8",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/main.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/server/app_init.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/server/handlers/adskproxy/register_all_handlers.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/server/rebar.py",
		"/Users/bteam/Developer/tasks-backend/server/rebar.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/adskproxy/issues.py",
		"/Users/bteam/Developer/tasks-backend/tests/api_tests/base.py",
		"/Users/bteam/Developer/tasks-backend/tests/api_tests/test_issues_sync.py",
		"/Users/bteam/Developer/tasks-backend/server/app_init.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/adskproxy/register_all_handlers.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/v0/register_all_handlers.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/versionless/issues.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/versionless/register_all_handlers.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/v0/issues.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/bus_logic/issues.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/utils.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/v1/issues.py",
		"/Users/bteam/Developer/tasks-backend/tests/api_tests/gg_issues_sync_test.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/models/issue.py",
		"/Users/bteam/Developer/tasks-backend/Makefile",
		"/Users/bteam/Developer/tasks-backend/tests/data_access_tests/data_base.py",
		"/Users/bteam/Developer/tasks-backend/docker-compose.yml",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/models/mixins/label.py",
		"/Users/bteam/Developer/tasks-backend/docker-compose.test.yml",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/config.py",
		"/Users/bteam/Developer/tasks-backend/tasks_backend/models/postgresql/replication.py",
		"/Users/bteam/Developer/tasks-backend/server/handlers/v1/register_all_handlers.py",
		"/Users/bteam/Developer/customer_api_dispatcher/server.js",
		"/Users/bteam/Developer/customer_api/customer_api/app/handlers/decorators/rfi_decorator.py",
		"/Users/bteam/Developer/customer_api/customer_api/app/helpers/gg_issues_client_helper.py",
		"/Users/bteam/Developer/customer_api/customer_api/app/handlers/helpers/rfi_helper.py",
		"/Users/bteam/Developer/customer_api/customer_api/app/handlers/authentication_token_basic_handler.py",
		"/Users/bteam/Developer/customer_api/customer_api/app/handlers/helpers/auth_helper.py",
		"/Users/bteam/Developer/cacahuete/app/handlers/v0/session_handlers.py",
		"/Users/bteam/Desktop/untitled.html",
		"/Users/bteam/Developer/Show-Finder/client/node_modules/@babel/parser/lib/index.js",
		"/Users/bteam/Developer/Show-Finder/emails/test/html.pug",
		"/Users/bteam/Developer/Show-Finder/show-emailer.js",
		"/Users/bteam/Developer/Show-Finder/email-all-users.js",
		"/Users/bteam/Developer/Show-Finder/response-parsers.js",
		"/Users/bteam/Developer/Show-Finder/helpers.js",
		"/Users/bteam/Developer/Show-Finder/emails/test/subject.pug",
		"/Users/bteam/Developer/plangrid-windows/PlanGrid.Localization/Resources.resx",
		"/Users/bteam/Developer/submittals_json.json",
		"/Users/bteam/Developer/Show-Finder/client/config/paths.js",
		"/Users/bteam/Developer/Show-Finder/client/config/webpack.config.js",
		"/Users/bteam/Developer/Show-Finder/client/public/index.html",
		"/Users/bteam/Developer/Show-Finder/client/src/SpotifySearch.js",
		"/Users/bteam/Developer/PGFoundation/.idea/workspace.xml",
		"/Users/bteam/Developer/Show-Finder/client/node_modules/react-scripts/scripts/start.js"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"<current file>",
			"",
			"<current file>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"getalltracks",
			"gettracksfor",
			"available",
			"console.l",
			"console.log",
			"top_track_id",
			"spotifyto",
			"redis",
			"received",
			"artist",
			"fetch",
			"basespot",
			"base",
			"'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "pages.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3803,
						"regions":
						{
						},
						"selection":
						[
							[
								2254,
								2254
							]
						],
						"settings":
						{
							"auto_name": "pages.ts",
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							},
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 881.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/bteam/Developer/lineup-list/src/redis-helper.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9104,
						"regions":
						{
						},
						"selection":
						[
							[
								2347,
								2365
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 145.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/bteam/Developer/lineup-list/src/spotify-helper.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8470,
						"regions":
						{
						},
						"selection":
						[
							[
								3789,
								3789
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 1135.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/bteam/Developer/lineup-list/views/customize-list.handlebars",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4518,
						"regions":
						{
						},
						"selection":
						[
							[
								177,
								177
							]
						],
						"settings":
						{
							"syntax": "Packages/Handlebars/grammars/Handlebars.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1163,
						"regions":
						{
						},
						"selection":
						[
							[
								507,
								507
							]
						],
						"settings":
						{
							"auto_name": "add button to create spotify playlist if user auth",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"typescript_plugin_format_options":
							{
								"convertTabsToSpaces": true,
								"indentSize": 4,
								"tabSize": 4
							}
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/bteam/Developer/lineup-list/src/warm-cache-for-festival.ts",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2072,
						"regions":
						{
						},
						"selection":
						[
							[
								798,
								798
							]
						],
						"settings":
						{
							"syntax": "Packages/TypeScript/TypeScript.tmLanguage",
							"use_tab_stops": false
						},
						"translation.x": 0.0,
						"translation.y": 39.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 38.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "lineup-list.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"auth-h",
				"routes/auth-handler.js"
			],
			[
				"reba",
				"server/rebar.py"
			],
			[
				"helper",
				"helpers.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 284.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
